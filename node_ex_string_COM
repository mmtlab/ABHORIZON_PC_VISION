#!/usr/bin/env python

from __future__ import division
import cv2
import numpy as np
import socket
import struct
import EVA
import multiprocessing
from datetime import datetime

MAX_DGRAM = 2 ** 16

#####questa funzione di ricezione stringhe viene gestita da un processo cosi creato:
p3 = multiprocessing.Process(target=receiver.listen_for_TCP_string, args=(string_from_tcp_ID,))
p3.start()
p3.join()

##La funzione:


def listen_for_TCP_string(string_from_tcp_ID):

    port = 21011
    ip = '127.0.0.1'


    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    s.bind((ip, port))
    print("reciving config: IP = {}, PORT = {}. ".format(ip, port))

    while True:

        seg, addr = s.recvfrom(MAX_DGRAM)  # here was the error lo da sempre e non legge mai la stringa inviata sara
        # perche deve stare in ascolto costante per poter beccare l esatto momento in cui arriva il pacchetto ,
        # unica proposta crea un nuovo processo parallelo che continua ad ascoltare e quando c e un  nuovo messaggio aggiorna il value di multiprocessing comune


        seg = seg.decode('utf-8')
        print("FROM TCP SEGB:_",seg)

        if seg == "stop":
            string_from_tcp_ID.value = 0
        elif seg == "pause":
            string_from_tcp_ID.value = 10
        elif seg == "start":
            string_from_tcp_ID.value = 100
        else:
            string_from_tcp_ID.value = EVA.ex_string_to_ID(seg)
    s.close()
    
    
    ####FAKE SENDER ALIAS MANUEL COORDINATOR:
    #sono ancora quelli simulati, quindi puntano sul local IP. 
    # e uno script separato che viene lanciato indipendentemente dal codice precedente, da un altro terminale.
    
    
from __future__ import division
import cv2
import numpy as np
import socket
import struct
import math

import time


def main():





    ip = '127.0.0.1'
    status = ["double_curl", "start","pause","start", "stop", "curl", "start", "pause","start", "stop"]
    port = 21011
    print("sending config: IP = {}, PORT = {}. ".format(ip, port))


    while True:
        for i in range(len(status)):
            ex_string_recived = status[i]
            time.sleep(10)

            BUFFER_SIZE = 1024

            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            host = socket.gethostname()  # Get the local machine name

            s.connect((ip, port))
            s.send(ex_string_recived.encode())
            print("sended: {}".format(ex_string_recived))

            s.close()




if __name__ == "__main__":
    main()
